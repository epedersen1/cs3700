#!/usr/bin/python -u
#
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1470
TIMEOUT = 10
ACK_RESEND_TIMER = 0.3

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

packets = {}

last_ack = ("", "")
last_ack_time = ""

# Now listen for packets
while True:
  if last_ack != ("", "") and time.time() - last_ack_time > ACK_RESEND_TIMER:
    last_ack_time = time.time()
    log("[resend last ack]")
    sock.sendto(last_ack[0], last_ack[1])

  # If nothing is ready, we hit the timeout
  try:
    result = sock.recvfrom(MSG_SIZE)
    (data, addr) = result

    try:
      decoded = json.loads(data)

      # If the EOF flag is set, exit
      if (decoded['eof']):
        log("[completed]")
        sys.exit(0)
     
      # Check if packet is duplicate
      if decoded['id'] in packets:
        msg = json.dumps({"id": decoded['id'], "ack": decoded['seq'] + len(decoded['data'])})
        log("[packet ignored] dup, resend ack w/ id " + str(decoded['id']))
        last_ack = (msg, addr)
        last_ack_time = time.time()
        sock.sendto(msg, addr)
        continue

      # Check if term packet
      if decoded['id'] < 0:
        log("[recv term packet] id " + str(decoded['id']))
        packets[decoded['id']] = decoded['data']
        msg = json.dumps({"id": decoded['id'], "ack": decoded['seq']+len(decoded['data'])})
        last_ack = (msg, addr)
        last_ack_time = time.time()
        sock.sendto(msg, addr)
        final_id = -decoded['id']
        for i in range(1, final_id):
          sys.stdout.write(packets[i])
          log("[completed]")
        continue

      # If there is data, we accept it and print it out
      if (decoded['data']):
        if len(packets.keys()) == 0 or decoded['id'] == max(packets.keys())+1:
            log("[recv data] " + str(decoded['seq']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
        else:
            log("[recv data] " + str(decoded['seq']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (out-of-order)")


      packets[decoded['id']] = decoded['data']
      # Send back an ack to the sender
      msg = json.dumps({"id": decoded['id'], "ack": decoded['seq'] + len(decoded['data'])})
      last_ack = (msg, addr)
      last_ack_time = time.time()
      if sock.sendto(msg, addr) < len(msg):
        log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      log(str(e))
      raise e
    except SystemExit:
      log("exiting.")
      sys.exit(0)
  except:
    log("[error] timeout")
    sys.exit(0)
