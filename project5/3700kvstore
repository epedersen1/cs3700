#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

PRINT = False

NUM_REPLICAS = len(replica_ids) + 1
HEARTBEAT = 0.04
ELECTION_MIN = 150
ELECTION_MAX = 400
MAX_LOG_UPDATE = 100
MIN_LOG_UPDATE = 1

last = time.time()
log_last = time.time()
hb_cnt = 0

state = 'follower'
leader = 'FFFF'
term = 0
votes = 0
election_timeout = random.randint(ELECTION_MIN, ELECTION_MAX) / 1000.

commitIndex = -1
entries = []

nextIndex = {}
matchIndex = {}
for replica in replica_ids:
    nextIndex[replica] = 0
    matchIndex[replica] = -1

command_queue = []

log = []
kv_store = {}

def pp(s):
    if PRINT:
        print(s)

while True:
    if state == 'follower':
        ready = select.select([sock], [], [], 0.1)[0] 
        if sock in ready:
            msg_raw = sock.recv(32768)
                
            if len(msg_raw) == 0: continue
            
            msg = json.loads(msg_raw)
            if msg['type'] in ['get', 'put']:
                command_queue.append(msg)

            if msg['type'] == 'RequestVote':
                if msg['term'] > term and (len(log) == 0 or msg['lastLogTerm'] > log[-1]['term']  or (msg['lastLogTerm'] == log[-1]['term'] and msg['lastLogIndex'] >= len(log)-1)):
                    last = time.time()
                    term = msg['term']
                    res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'vote', 'term': term}
                    pp(my_id + " voted for " + msg['src'])
                    sock.send(json.dumps(res))
                else:
                    term = max(term, msg['term'])
                    res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'no-vote', 'term': term}
                    sock.send(json.dumps(res))
                    pp(my_id + " won't vote for " + msg['src'])

            if msg['type'] == 'AppendEntries':
                last = time.time()
                if msg['term'] >= term:
                    term = msg['term']
                    leader = msg['src']
                if msg['entries'] == []:
                    pass
                elif msg['term'] < term or (msg['prevLogIndex'] >= 0 and (len(log)-1 < msg['prevLogIndex'] or log[msg['prevLogIndex']]['term'] != msg['prevLogTerm'])):
                    res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'term': term, 'type': 'AppendEntriesRes', 'success': False}
                    sock.send(json.dumps(res))
                else:
                    log = log[:msg['prevLogIndex']+1]
                    log.extend(msg['entries'])
                    if msg['leaderCommit'] > commitIndex:
                        for i in range(commitIndex + 1, min(msg['leaderCommit'] + 1, len(log))):
                            cmd = log[i]['command']
                            kv_store[cmd['key']] = cmd['value']
                        commitIndex = msg['leaderCommit']
                    res = {'src': my_id, 'dst': leader, 'leader': leader, 'term': term, 'type': 'AppendEntriesRes', 'success': True, 'matchIndex': len(log)-1}
                    sock.send(json.dumps(res))

                for old_msg in command_queue: 
                    res = {'src': my_id, 'dst': old_msg['src'], 'leader': leader, 'type': 'redirect', 'MID': old_msg['MID']}
                    sock.send(json.dumps(res))
                command_queue = []

        if time.time() - last > election_timeout:
            term += 1
            votes = 1
            state = 'candidate'
            election_timeout = random.randint(ELECTION_MIN, ELECTION_MAX) / 1000.
            pp(my_id + " is a candidate, term: " + str(term))
            last = time.time()
            res = {'src': my_id, 'dst': 'FFFF', 'leader': leader, 'type': 'RequestVote', 'term': term}
            res['lastLogIndex'] = len(log)-1
            res['lastLogTerm'] = 0 if len(log) == 0 else log[-1]['term']
            sock.send(json.dumps(res))

    if state == 'candidate':
        ready = select.select([sock], [], [], 0.1)[0] 
        if sock in ready:
            msg_raw = sock.recv(32768)
                
            if len(msg_raw) == 0: continue
            
            msg = json.loads(msg_raw)
            
            if msg['type'] in ['get', 'put']:
                command_queue.append(msg)
                #res = {'src': my_id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'fail', 'MID': msg['MID']}
                #sock.send(json.dumps(res))
            
            if msg['type'] == 'vote':
                votes += 1
                if votes > NUM_REPLICAS / 2:
                    state = 'leader'
                    leader = my_id
                    pp(my_id + " is a leader!")
                    res = {'src': my_id, 'dst': 'FFFF', 'leader': leader, 'type': 'AppendEntries', 'term': term, 'entries': []}
                    sock.send(json.dumps(res))
                    
                    nextIndex = {}
                    matchIndex = {}
                    for replica in replica_ids:
                        nextIndex[replica] = len(log)
                        matchIndex[replica] = -1

                    for old_msg in command_queue: 
                        if old_msg['type'] == 'get':
                            key = old_msg['key']
                            value = kv_store[key] if key in kv_store else ''
                            res = {'src': my_id, 'dst': old_msg['src'], 'leader': leader, 'type': 'ok', 'MID': old_msg['MID'], 'value': value}
                            sock.send(json.dumps(res))
                        if old_msg['type'] == 'put':
                            log.append({'command': {'key': old_msg['key'], 'value': old_msg['value'], 'src': old_msg['src'], 'MID': old_msg['MID']}, 'term': term})

                    for replica in replica_ids:
                        res = {'src': my_id, 'dst': replica, 'leader': leader, 'type': 'AppendEntries', 'term': term, 'leaderCommit': commitIndex}
                        last_entry = min(len(log), nextIndex[replica]+MAX_LOG_UPDATE)
                        res['entries'] = log[nextIndex[replica]:last_entry]
                        res['prevLogIndex'] = nextIndex[replica]-1
                        res['prevLogTerm'] = -1 if res['prevLogIndex'] == -1 else log[res['prevLogIndex']]['term']
                        sock.send(json.dumps(res))
                        last = time.time()
                    command_queue = []

            if msg['type'] == 'no-vote':
                state = 'follower'
                term = max(term, msg['term'])

            if msg['type'] == 'RequestVote':
                if msg['term'] > term and (len(log) == 0 or msg['lastLogTerm'] > log[-1]['term']  or (msg['lastLogTerm'] == log[-1]['term'] and msg['lastLogIndex'] >= len(log)-1)):
                    state = 'follower'
                    last = time.time()
                    term = msg['term']
                    res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'vote', 'term': term}
                    pp('candidate ' + my_id + " voted for " + msg['src'])
                    sock.send(json.dumps(res))
                else:
                    if msg['term'] > term:
                        state = 'follower'
                        term = msg['term']
                    res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'no-vote', 'term': term}
                    sock.send(json.dumps(res))
                    pp('candidate ' + my_id + " won't vote for " + msg['src'])

            if msg['type'] == 'AppendEntries' and msg['term'] >= term:
                last = time.time()
                state = 'follower'
                leader = msg['leader']

        if time.time() - last > election_timeout:
            term += 1
            votes = 1
            election_timeout = random.randint(ELECTION_MIN, ELECTION_MAX) / 1000.
            pp(my_id + " is a candidate again, term: " + str(term))
            last = time.time()
            res = {'src': my_id, 'dst': 'FFFF', 'leader': leader, 'type': 'RequestVote', 'term': term}
            res['lastLogIndex'] = len(log)-1
            res['lastLogTerm'] = 0 if len(log) == 0 else log[-1]['term']
            sock.send(json.dumps(res))

    if state == 'leader':
        ready = select.select([sock], [], [], 0.1)[0] 
        if sock in ready:
            msg_raw = sock.recv(32768)
                
            if len(msg_raw) == 0: continue
            
            msg = json.loads(msg_raw)    
            
            if msg['type'] == 'RequestVote':
                if msg['term'] > term and (len(log) == 0 or msg['lastLogTerm'] > log[-1]['term']  or (msg['lastLogTerm'] == log[-1]['term'] and msg['lastLogIndex'] >= len(log)-1)):
                    state = 'follower'
                    last = time.time()
                    term = msg['term']
                    res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'vote', 'term': term}
                    pp(my_id + " voted for " + msg['src'])
                    sock.send(json.dumps(res))
                else:
                    term = max(term, msg['term'])
                    res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'no-vote', 'term': term}
                    sock.send(json.dumps(res))
                    pp(my_id + " won't vote for " + msg['src'])

            if msg['type'] == 'AppendEntriesRes':
                replica = msg['src']
                if msg['term'] > term:
                    last = time.time()
                    state = 'follower'
                    leader = msg['src']
                    term = msg['term']

                elif msg['success']:
                    matchIndex[replica] = msg['matchIndex']
                    nextIndex[replica] = matchIndex[replica] + 1
                    majority = sorted(matchIndex.values(), reverse=True)[NUM_REPLICAS/2-1]
                    if majority > commitIndex and log[majority]['term'] == term:
                        for i in range(commitIndex + 1, majority + 1):
                            cmd = log[i]['command']
                            kv_store[cmd['key']] = cmd['value']
                            res = {'src': my_id, 'dst': cmd['src'], 'leader': leader, 'type': 'ok', 'MID': cmd['MID']}
                            sock.send(json.dumps(res))
                        commitIndex = majority
                else:
                    nextIndex[replica] -= 1
                    res = {'src': my_id, 'dst': replica, 'leader': leader, 'type': 'AppendEntries', 'term': term, 'leaderCommit': commitIndex}
                    last_entry = min(len(log), nextIndex[replica]+MAX_LOG_UPDATE)
                    res['entries'] = log[nextIndex[replica]:last_entry]
                    res['prevLogIndex'] = nextIndex[replica]-1
                    if res['prevLogIndex'] >= len(log) or res['prevLogIndex'] < -1:
                        print(msg)
                        print(res)
                    res['prevLogTerm'] = -1 if res['prevLogIndex'] == -1 else log[res['prevLogIndex']]['term']
                    sock.send(json.dumps(res))

            if msg['type'] == 'get':
                key = msg['key']
                value = kv_store[key] if key in kv_store else ''
                res = {'src': my_id, 'dst': msg['src'], 'leader': leader, 'type': 'ok', 'MID': msg['MID'], 'value': value}
                sock.send(json.dumps(res))

            if msg['type'] == 'put':
                log.append({'command': {'key': msg['key'], 'value': msg['value'], 'src': msg['src'], 'MID': msg['MID']}, 'term': term})
                for replica in replica_ids:
                    res = {'src': my_id, 'dst': replica, 'leader': leader, 'type': 'AppendEntries', 'term': term, 'leaderCommit': commitIndex}
                    last_entry = min(len(log), nextIndex[replica]+MAX_LOG_UPDATE)
                    res['entries'] = log[nextIndex[replica]:last_entry]
                    res['prevLogIndex'] = nextIndex[replica]-1
                    if res['prevLogIndex'] >= len(log) or res['prevLogIndex'] < -1:
                        print(msg)
                        print(res)
                    res['prevLogTerm'] = -1 if res['prevLogIndex'] == -1 else log[res['prevLogIndex']]['term']
                    sock.send(json.dumps(res))
                last = time.time()

        if time.time() - last > HEARTBEAT:
            res = {'src': my_id, 'dst': 'FFFF', 'leader': leader, 'type': 'AppendEntries', 'term': term, 'leaderCommit': commitIndex, 'entries': []}
            sock.send(json.dumps(res))
            last = time.time()
